public class Dequeue {
    private class Node{
        private int data;
        private Node next;
        private Node previous;
        
        private Node(int data){
            this.data = data;
            this.next = null;
            this.previous = null;
        }
    }
    private Node head;
    private Node tail;
    
    public Dequeue(){
        head = null;
        tail = null;
    }
    public boolean isEmpty(){
        return (head == null || tail == null);
    }
    public void insertFront(int data){
        Node newNode = new Node(data);
        if(isEmpty()){
            head = newNode;
            tail = newNode;
        }
        else{
           tail.next = newNode;
           newNode.previous = tail;
           tail = newNode;
        }
    }
    public void insertRear(int data){
        Node newNode = new Node(data);
        if(isEmpty()){
            head = newNode;
            tail = newNode;
        }
        else{
            head.previous = newNode;
            newNode.next = head;
            head = newNode;
        }      
    }
    public int deleteFront(){
        if(isEmpty()){
            System.out.println("Empty, returning -1.");
            return -1;
        }
        else if(head == tail){
            Node current = tail;
            head = null;
            tail = null;
            return current.data;
            } 
        else{
            Node current = tail;
            tail = tail.previous;
            tail.next = null;
            current.previous = null;
            return current.data;
        }
    }
    public int deleteRear(){
        if(isEmpty()){
            System.out.println("Empty, returning -1.");
            return -1;
        }
        else if(head == tail){
            Node current = head;
            head = null;
            tail = null;
            return current.data;
        }
        else{
            Node current = head;
            head = head.next;
            head.previous = null;
            current.next = null;
            return current.data;
        }       
    }
    public int getFront(){
        if(isEmpty()){
            System.out.println("Empty, returning -1.");
            return -1;
        }
        else{
            return tail.data;
        }
    }
    public int getRear(){
        if(isEmpty()){
            System.out.println("Empty, returning -1.");
            return -1;
        }
        else{
            return head.data;
        }
    }
    public void print(){
        Node current = head;
        while(current != null){
            System.out.print(current.data + " ");
            current = current.next;
        }
        System.out.println();
    }
}
